/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package punching;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.util.List;

/**
 *
 * @author admin
 */
public class ObjectDrawPanel extends javax.swing.JPanel {

    /**
     * Creates new form ObjectDrawPanel
     */
    public ObjectDrawPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private Template template;
    private List<ObjectV> listObject;
    float headCutLength = 0;
    boolean isCutTail = false;
    boolean isShowPosition = true;
    private float scale = 0.5f;
    private Dimension area;
    public static int OBJECT_HEIGHT = 200;
    private final int HOLE_WIDTH = 2;

    public float getScale() {
        return scale;
    }

    public void setScale(float scale) {
        this.scale = scale;
    }

    public Template getTemplate() {
        return template;
    }

    public void setTemplate(Template template) {
        this.template = template;
        updateArea();
    }

    public List<ObjectV> getListObject() {
        return listObject;
    }

    public void setListObject(List<ObjectV> listObject) {
        this.listObject = listObject;
        updateArea();
    }

    public float getHeadCutLength() {
        return headCutLength;
    }

    public void setHeadCutLength(float headCutLength) {
        this.headCutLength = headCutLength;
    }

    public boolean isIsCutTail() {
        return isCutTail;
    }

    public void setIsCutTail(boolean isCutTail) {
        this.isCutTail = isCutTail;
    }

    public boolean isIsShowPosition() {
        return isShowPosition;
    }

    public void setIsShowPosition(boolean isShowPosition) {
        this.isShowPosition = isShowPosition;
        repaint();
    }

    private void updateArea() {
        area = new Dimension(0, 0);
        this.setPreferredSize(area);
        int width = 0;

        // update scale
        if (this.getParent() != null) {
            //int parentHeight = this.getParent().getParent().getHeight();
            //scale = (float) (parentHeight - 20) / (OBJECT_HEIGHT * 2 + MARGIN_TOP + MARGIN_BOTTOM);
            //System.out.println("scale: " + scale);
        }

        // for plan
        if (this.listObject != null) {
            width += headCutLength;
            for (ObjectV obj : this.listObject) {
                width += obj.getLength();
            }
        } else if (this.template != null) { // for template
            width = (int) this.template.getLength();
        }
        area.width = (int) (scale * width) + 10;
        area.height = (int) (scale * (OBJECT_HEIGHT * 2));

        this.revalidate();
        this.repaint();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (template != null) {
            drawTemplate(g);
        } else if (listObject != null) {
            drawObject(g);
        }
    }

    void drawTemplate(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        if (template != null) {
            int width = (int) template.getLength();
            g2d.setColor(Color.BLUE);
            g2d.drawRect(0, 0, (int) (scale * width), (int) (scale * OBJECT_HEIGHT * 2));

            g2d.setColor(Color.BLUE);
            g2d.setStroke(new BasicStroke(2f));
            g2d.drawLine(0, (int) (scale * OBJECT_HEIGHT), (int) (scale * width), (int) (scale * OBJECT_HEIGHT));

            paintObject(g2d, 0, template.getFaceAHoles(), template.getFaceBHoles());
        }
    }

    void drawObject(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        if (listObject != null) {

            int width = (int) headCutLength;
            for (ObjectV obj : this.listObject) {
                width += obj.getLength();
            }

            // draw 2 faces
            g2d.setColor(Color.BLUE);
            g2d.drawRect(0, 0, (int) (scale * width), (int) (scale * OBJECT_HEIGHT * 2));

            // draw faces separator
            g2d.setColor(Color.BLUE);
            g2d.setStroke(new BasicStroke(2f));
            g2d.drawLine(0, (int) (scale * OBJECT_HEIGHT), (int) (scale * width), (int) (scale * OBJECT_HEIGHT));

            int position = 0;
            if (headCutLength > 0) {
                position += scale * headCutLength;
                paintCut(g2d, position);
            }
            int countObj = 0;
            for (ObjectV obj : this.listObject) {
                paintObject(g2d, position, obj.getFaceAHoles(), obj.getFaceBHoles());
                if (obj.isHasmark()){
                    paintMarker(g2d, position, obj.getMarker());
                }
                position += scale * obj.getLength();

                if (countObj < this.listObject.size() - 1 || isCutTail) {
                    paintCut(g2d, position);
                }
            }
        }
    }

    /**
     *
     * @param g2d
     * @param position this value has calculated with scale
     */
    private void paintObject(Graphics2D g2d, int position, List<Hole> faceAHoles, List<Hole> faceBHoles) {

        // paint face A
        g2d.setColor(Color.BLACK);
        g2d.setStroke(new BasicStroke(2f));
        Font font = new Font("Serif", Font.PLAIN, 10);
        g2d.setFont(font);
        for (Hole hole : faceAHoles) {
            g2d.setColor(Color.RED);
            g2d.drawOval((int) (scale * hole.getY() + position),
                    (int) (scale * (OBJECT_HEIGHT - hole.getX())), HOLE_WIDTH, HOLE_WIDTH);
            if (isShowPosition) {
                g2d.setColor(Color.BLUE);
                String holePos = "(" + forPrint(hole.getY()) + "-" + forPrint(hole.getX()) + ")";
                drawCenteredString(holePos, (int) (scale * hole.getY() + position), (int) (scale * (OBJECT_HEIGHT - hole.getX())), g2d);
            }
        }
        // paint face B
        for (Hole hole : faceBHoles) {
            g2d.setColor(Color.RED);
            g2d.drawOval((int) (scale * hole.getY() + position),
                    (int) (scale * (OBJECT_HEIGHT + hole.getX())), HOLE_WIDTH, HOLE_WIDTH);

            if (isShowPosition) {
                g2d.setColor(Color.BLUE);
                String holePos = "(" + forPrint(hole.getY()) + "-" + forPrint(hole.getX()) + ")";
                drawCenteredString(holePos, (int) (scale * hole.getY() + position), (int) (scale * (OBJECT_HEIGHT + hole.getX())), g2d);
            }
        }

    }

    private void paintCut(Graphics2D g2d, int position) {
        g2d.setColor(Color.GRAY);
        float[] dashingPattern3 = {10f, 10f, 1f, 10f};
        Stroke stroke3 = new BasicStroke(4f, BasicStroke.CAP_SQUARE,
                BasicStroke.JOIN_MITER, 1.0f, dashingPattern3, 0.0f);
        g2d.setStroke(stroke3);
        g2d.drawLine(position, 0, position, (int) (scale * OBJECT_HEIGHT * 2));
    }

    private void paintMarker(Graphics2D g2d, int position, Hole marker) {
        Font font = new Font("Serif", Font.PLAIN, 10);
        g2d.setFont(font);
        g2d.setColor(Color.YELLOW);
        g2d.setStroke(new BasicStroke(2f));
        g2d.drawString("MARKER", (int) (scale * marker.getY() + position), (int) (scale * (OBJECT_HEIGHT / 2)));
    }

    public static String forPrint(double d) {
        int i = (int) d;
        return d == i ? String.valueOf(i) : String.valueOf(d);
    }

    public void drawCenteredString(String s, int x, int y, Graphics g) {
        FontMetrics fm = g.getFontMetrics();
        int newX = x - (fm.stringWidth(s) / 2);
        int newY = y - fm.getDescent();
        g.drawString(s, newX, newY);
    }

    public void zoomIn() {
        scale = scale + scale * 0.1f;
        if (scale > 2) {
            scale = 2;
        }
        updateArea();
        repaint();
    }

    public void zoomOut() {
        scale = scale - 0.1f;
        if (scale <= 0.1f) {
            scale = 0.1f;
        }
        updateArea();
        repaint();
    }

}
