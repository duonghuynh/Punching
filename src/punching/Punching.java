/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
package punching;

import java.awt.Component;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableRowSorter;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import static punching.Environment.getToolByName;

public class Punching extends javax.swing.JFrame {

    /**
     * Creates new form Antenna
     */
    public Punching() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnSetting = new javax.swing.JButton();
        btnEditTemplate = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        btnNew = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnSaveAs = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        panelOtherOption = new javax.swing.JPanel();
        chkCutHead = new javax.swing.JCheckBox();
        txtCutHeadLength = new javax.swing.JFormattedTextField();
        chkCutTail = new javax.swing.JCheckBox();
        txtFaceWidth = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        panelObjects = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstObject = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        lblObjectName = new javax.swing.JLabel();
        txtObjectLength = new javax.swing.JFormattedTextField();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHolesA = new punching.MyTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHolesB = new punching.MyTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cboListTemplate = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();
        txtMarker = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTotalLength = new javax.swing.JFormattedTextField();
        chkMarker = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        drawPanel = new punching.ObjectDrawPanel();
        jToolBar3 = new javax.swing.JToolBar();
        btnZoomIn = new javax.swing.JButton();
        btnZoomOut = new javax.swing.JButton();
        chkShowPositionText = new javax.swing.JCheckBox();
        panelBottom = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnCalculate = new javax.swing.JButton();
        btnWritePLC = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HỆ THỐNG ĐỘT TỰ ĐỘNG");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setRollover(true);

        btnSetting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/setting.png"))); // NOI18N
        btnSetting.setText("Setting");
        btnSetting.setToolTipText("Setting tools, communication...");
        btnSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSetting);

        btnEditTemplate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/template_source.png"))); // NOI18N
        btnEditTemplate.setText("Tạo mẫu");
        btnEditTemplate.setToolTipText("Tạo và Chỉnh sửa Mẫu");
        btnEditTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTemplateActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditTemplate);

        jToolBar2.setRollover(true);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/document-new.png"))); // NOI18N
        btnNew.setText("New");
        btnNew.setToolTipText("New Plan");
        btnNew.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jToolBar2.add(btnNew);

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/open-file.png"))); // NOI18N
        btnOpen.setText("Open");
        btnOpen.setToolTipText("Open Saved Plan");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        jToolBar2.add(btnOpen);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/floppy-32.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setToolTipText("Save Plan");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jToolBar2.add(btnSave);

        btnSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1427532700_save_all.png"))); // NOI18N
        btnSaveAs.setText("Save As");
        btnSaveAs.setToolTipText("Save As");
        btnSaveAs.setFocusable(false);
        btnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsActionPerformed(evt);
            }
        });
        jToolBar2.add(btnSaveAs);

        panelOtherOption.setBorder(javax.swing.BorderFactory.createTitledBorder("Lựa chọn"));

        chkCutHead.setText("Cắt đầu");
        chkCutHead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCutHeadActionPerformed(evt);
            }
        });

        txtCutHeadLength.setEditable(false);
        txtCutHeadLength.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtCutHeadLength.setText("0");
        txtCutHeadLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCutHeadLengthActionPerformed(evt);
            }
        });
        txtCutHeadLength.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCutHeadLengthFocusLost(evt);
            }
        });

        chkCutTail.setSelected(true);
        chkCutTail.setText("Cắt đuôi");
        chkCutTail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCutTailActionPerformed(evt);
            }
        });

        txtFaceWidth.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtFaceWidth.setText("200");
        txtFaceWidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFaceWidthFocusLost(evt);
            }
        });

        jLabel2.setText("Chiều rộng: ");

        org.jdesktop.layout.GroupLayout panelOtherOptionLayout = new org.jdesktop.layout.GroupLayout(panelOtherOption);
        panelOtherOption.setLayout(panelOtherOptionLayout);
        panelOtherOptionLayout.setHorizontalGroup(
            panelOtherOptionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOtherOptionLayout.createSequentialGroup()
                .add(14, 14, 14)
                .add(panelOtherOptionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelOtherOptionLayout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(txtFaceWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(panelOtherOptionLayout.createSequentialGroup()
                        .add(chkCutHead)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                        .add(txtCutHeadLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(panelOtherOptionLayout.createSequentialGroup()
                        .add(chkCutTail)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelOtherOptionLayout.setVerticalGroup(
            panelOtherOptionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOtherOptionLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelOtherOptionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chkCutHead)
                    .add(txtCutHeadLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(chkCutTail)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelOtherOptionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtFaceWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelObjects.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh sách cây"));

        lstObject.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstObject.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onSelectObjectV(evt);
            }
        });
        jScrollPane1.setViewportView(lstObject);

        jLabel1.setText("Dài:");

        lblObjectName.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lblObjectName.setForeground(new java.awt.Color(0, 0, 255));
        lblObjectName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblObjectName.setText("Tên cây");

        txtObjectLength.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtObjectLength.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtObjectLengthFocusLost(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1420490314_minus-16.png"))); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        tblHolesA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblHolesA.setCellSelectionEnabled(true);
        tblHolesA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblHolesA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblHolesAFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(tblHolesA);

        tblHolesB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblHolesB.setCellSelectionEnabled(true);
        tblHolesB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblHolesB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblHolesBFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(tblHolesB);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Mặt A");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Mặt B");

        cboListTemplate.setModel(getTemplateModel());
        cboListTemplate.setRenderer(new ComboBoxRenderer());

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1420490265_add.png"))); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnReload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Refresh16.png"))); // NOI18N
        btnReload.setToolTipText("Reload list of template");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        txtMarker.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtMarker.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        txtMarker.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMarkerFocusLost(evt);
            }
        });

        jLabel3.setText("Tổng chiều dài:");

        txtTotalLength.setEditable(false);
        txtTotalLength.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));

        chkMarker.setText("Dấu:");
        chkMarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMarkerActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelObjectsLayout = new org.jdesktop.layout.GroupLayout(panelObjects);
        panelObjects.setLayout(panelObjectsLayout);
        panelObjectsLayout.setHorizontalGroup(
            panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelObjectsLayout.createSequentialGroup()
                .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, panelObjectsLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnReload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cboListTemplate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 165, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(panelObjectsLayout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(panelObjectsLayout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtTotalLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(btnRemove, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 236, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelObjectsLayout.createSequentialGroup()
                        .add(103, 103, 103)
                        .add(jLabel4)
                        .add(224, 224, 224)
                        .add(jLabel5))
                    .add(panelObjectsLayout.createSequentialGroup()
                        .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .add(lblObjectName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(panelObjectsLayout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtObjectLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(chkMarker)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(txtMarker, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 211, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
        );

        panelObjectsLayout.linkSize(new java.awt.Component[] {jScrollPane2, jScrollPane3}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        panelObjectsLayout.setVerticalGroup(
            panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelObjectsLayout.createSequentialGroup()
                .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelObjectsLayout.createSequentialGroup()
                        .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnReload)
                            .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(cboListTemplate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(btnAdd))
                            .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(txtObjectLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel1)
                                .add(txtMarker, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(chkMarker)))
                        .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(panelObjectsLayout.createSequentialGroup()
                                .add(3, 3, 3)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(btnRemove)
                                    .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(txtTotalLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel3))))
                            .add(panelObjectsLayout.createSequentialGroup()
                                .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel4)
                                    .add(jLabel5))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(panelObjectsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                    .add(panelObjectsLayout.createSequentialGroup()
                        .add(4, 4, 4)
                        .add(lblObjectName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel1.getAccessibleContext().setAccessibleName("Length");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(panelOtherOption, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelObjects, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(panelObjects, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(panelOtherOption, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelObjects.getAccessibleContext().setAccessibleName(" System");
        panelObjects.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane1.addTab("Soạn số liệu", jPanel4);

        org.jdesktop.layout.GroupLayout drawPanelLayout = new org.jdesktop.layout.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1711, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 459, Short.MAX_VALUE)
        );

        jScrollPane5.setViewportView(drawPanel);

        jToolBar3.setRollover(true);

        btnZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1428185613_magnifier_zoom_in.png"))); // NOI18N
        btnZoomIn.setFocusable(false);
        btnZoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });
        jToolBar3.add(btnZoomIn);

        btnZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1428185566_zoom_out.png"))); // NOI18N
        btnZoomOut.setFocusable(false);
        btnZoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });
        jToolBar3.add(btnZoomOut);

        chkShowPositionText.setSelected(true);
        chkShowPositionText.setText("Xem tọa độ");
        chkShowPositionText.setFocusable(false);
        chkShowPositionText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkShowPositionText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chkShowPositionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowPositionTextActionPerformed(evt);
            }
        });
        jToolBar3.add(chkShowPositionText);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 959, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jToolBar3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 253, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jToolBar3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Xem hình ảnh", jPanel1);
        jPanel1.getAccessibleContext().setAccessibleName("Sample");

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1421449836_Log Out.png"))); // NOI18N
        btnExit.setText("Đóng");
        btnExit.setToolTipText("Tắt chương trình");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnCalculate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1421450856_Calculator.png"))); // NOI18N
        btnCalculate.setText("Calculate");
        btnCalculate.setEnabled(false);
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        btnWritePLC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1421450723_load_upload.png"))); // NOI18N
        btnWritePLC.setText("Nạp vào PLC");
        btnWritePLC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWritePLCActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelBottomLayout = new org.jdesktop.layout.GroupLayout(panelBottom);
        panelBottom.setLayout(panelBottomLayout);
        panelBottomLayout.setHorizontalGroup(
            panelBottomLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, panelBottomLayout.createSequentialGroup()
                .addContainerGap()
                .add(btnCalculate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnWritePLC)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnExit)
                .addContainerGap())
        );
        panelBottomLayout.setVerticalGroup(
            panelBottomLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, panelBottomLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(panelBottomLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnExit)
                    .add(btnCalculate)
                    .add(btnWritePLC)))
        );

        panelBottomLayout.linkSize(new java.awt.Component[] {btnCalculate, btnExit, btnWritePLC}, org.jdesktop.layout.GroupLayout.VERTICAL);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 188, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 506, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(264, Short.MAX_VALUE))
            .add(panelBottom, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jToolBar2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 423, Short.MAX_VALUE)
                .add(panelBottom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(42, 42, 42)
                    .add(jTabbedPane1)
                    .add(50, 50, 50)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void onSelectObjectV(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onSelectObjectV
        if (lstObject.getSelectedIndex() >= 0) {

            ObjectV objV = environment.getListObject().get(lstObject.getSelectedIndex());

            lblObjectName.setText(objV.getName());
            txtObjectLength.setValue(objV.getLength());
            chkMarker.setSelected(objV.isHasmark());            
            txtMarker.setValue(objV.getMarker().getY());
            txtMarker.setEnabled(objV.isHasmark());

            HoleTableModel modelA = new HoleTableModel(objV.getFaceAHoles(), "A");
            modelA.updateYR();
            tblHolesA.setModel(modelA);
            HoleTableModel modelB = new HoleTableModel(objV.getFaceBHoles(), "B");
            modelB.updateYR();
            tblHolesB.setModel(modelB);

            setCustomTableEditors();
        }
    }//GEN-LAST:event_onSelectObjectV

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        calculateData();
        if (frameCalculate == null) {
            frameCalculate = new CalculateFrame();
            frameCalculate.listHoles = this.listHoles;
            frameCalculate.setVisible(true);
        } else {
            frameCalculate.listHoles = this.listHoles;
            frameCalculate.setVisible(true);
            frameCalculate.toFront();
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        save(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void save(boolean forceNewFile) {
        if (forceNewFile || environment.getCurrentFile() == null) {
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Plan file (.xml)", "xml");
            String defaultPath = System.getProperty("user.dir") + File.separator + "plans";
            JFileChooser fc = new JFileChooser(defaultPath);
            fc.setFileFilter(filter);
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String path = fc.getSelectedFile().getAbsolutePath();
                if (!path.contains(".")) {
                    path = path + ".xml";
                }
                if (new File(path).exists()) {
                    int dialogButton = JOptionPane.YES_NO_OPTION;
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Ghi đè file?", "Cảnh báo", dialogButton);
                    if (dialogResult == JOptionPane.NO_OPTION) {
                        return;
                    }
                }
                savePlan(path);
                environment.setCurrentFile(path);
            }
        } else {
            savePlan(environment.getCurrentFile());
        }

    }

    private void savePlan(String path) {
        try {
            FileOutputStream fo = new FileOutputStream(path);
            JAXBContext context = JAXBContext.newInstance(Plan.class);
            Marshaller m = context.createMarshaller();
            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            Plan plan = new Plan();
            plan.setObjectV(environment.getListObject());
            m.marshal(plan, fo);
            try {
                fo.close();
            } catch (IOException ex) {
                Logger.getLogger(Punching.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Punching.class.getName()).log(Level.SEVERE, null, ex);

        } catch (JAXBException ex) {
            Logger.getLogger(Punching.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Template template = (Template) cboListTemplate.getSelectedItem();
        ObjectV obj = ObjectV.generate(template);
        obj.setName("L" + environment.getListObject().size() + "-" + obj.getName());
        obj.setHasmark(true);
        environment.getListObject().add(obj);
        reloadListObjectV();
        lstObject.setSelectedIndex(environment.getListObject().size() - 1);
        calculateDataAndReloadDisplay();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if (environment.getListObject().size() > 0) {
            environment.getListObject().remove(environment.getListObject().size() - 1);
            reloadListObjectV();
            if (environment.getListObject().size() > 0) {
                lstObject.setSelectedIndex(environment.getListObject().size() - 1);
            }
            calculateDataAndReloadDisplay();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnEditTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTemplateActionPerformed
        if (frameTemplate == null) {
            frameTemplate = new TemplateFrame();
            frameTemplate.setVisible(true);
        } else {
            frameTemplate.setVisible(true);
            frameTemplate.toFront();
        }
    }//GEN-LAST:event_btnEditTemplateActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        cboListTemplate.setModel(getTemplateModel());
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingActionPerformed
        SettingDialog settingDlg = new SettingDialog(this, true);
        settingDlg.setVisible(true);
    }//GEN-LAST:event_btnSettingActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        try {
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Plan file (.xml)", "xml");
            String defaultPath = System.getProperty("user.dir") + File.separator + "plans";
            JFileChooser fc = new JFileChooser(defaultPath);
            fc.setFileFilter(filter);
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String path = fc.getSelectedFile().getAbsolutePath();
                JAXBContext jc = JAXBContext.newInstance(Plan.class);
                Unmarshaller u = jc.createUnmarshaller();
                FileInputStream inputStream = new FileInputStream(path);
                Plan doc = (Plan) u.unmarshal(inputStream);

                environment.setListObject(doc.getObjectV());
                environment.setCurrentFile(path);

                // correct tool by face A and B
                for (ObjectV obj : environment.getListObject()) {
                    for (Hole h : obj.getFaceAHoles()) {
                        h.setT(getToolByName(h.getT().getName(), "A"));
                    }
                    for (Hole h : obj.getFaceBHoles()) {
                        if (h.getT() != null) {
                            h.setT(getToolByName(h.getT().getName(), "B"));
                        }
                    }
                }
                reloadListObjectV();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Punching.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JAXBException ex) {
            Logger.getLogger(Punching.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        if (environment.getCurrentFile() != null) {
            int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Save current plan?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.CANCEL_OPTION) {
                return;
            } else if (dialogResult == JOptionPane.YES_OPTION) {
                savePlan(environment.getCurrentFile());
            }
        }
        environment.setListObject(new ArrayList<ObjectV>());
        environment.setCurrentFile(null);
        reloadListObjectV();
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnWritePLCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWritePLCActionPerformed
        // always call caculate
        calculateData();
        if (txtTotalLength.getValue() == null || txtTotalLength.getValue().toString().length() == 0) {
            JOptionPane.showMessageDialog(this, "Chưa có dữ liệu để ghi");
            return;
        }
        WritePlcDialog writePlcDlg = new WritePlcDialog(this, true);
        writePlcDlg.setLength(totalLength);
        writePlcDlg.setData(listHoles);
        writePlcDlg.setVisible(true);
    }//GEN-LAST:event_btnWritePLCActionPerformed

    private void txtMarkerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMarkerFocusLost
        if (lstObject.getSelectedIndex() >= 0) {
            ObjectV objV = environment.getListObject().get(lstObject.getSelectedIndex());
            if (objV != null) {
                // use getText instead getValue 
                objV.getMarker().setY(Float.parseFloat(txtMarker.getText().replaceAll(",", "")));
                calculateDataAndReloadDisplay();
            }
        }
    }//GEN-LAST:event_txtMarkerFocusLost

    private void chkCutHeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCutHeadActionPerformed
        txtCutHeadLength.setEditable(chkCutHead.isSelected());
        calculateDataAndReloadDisplay();
    }//GEN-LAST:event_chkCutHeadActionPerformed

    private void txtObjectLengthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtObjectLengthFocusLost
        ObjectV objV = environment.getListObject().get(lstObject.getSelectedIndex());
        if (objV != null) {
            // use getText instead getValue 
            objV.setLength(Float.parseFloat(txtObjectLength.getText().replaceAll(",", "")));
            calculateDataAndReloadDisplay();
        }

    }//GEN-LAST:event_txtObjectLengthFocusLost

    private void txtCutHeadLengthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCutHeadLengthFocusLost
        calculateDataAndReloadDisplay();
    }//GEN-LAST:event_txtCutHeadLengthFocusLost

    private void tblHolesAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblHolesAFocusLost
        calculateDataAndReloadDisplay();
    }//GEN-LAST:event_tblHolesAFocusLost

    private void tblHolesBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblHolesBFocusLost
        calculateDataAndReloadDisplay();
    }//GEN-LAST:event_tblHolesBFocusLost

    private void txtFaceWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFaceWidthFocusLost
        int faceWidth = Integer.parseInt(txtFaceWidth.getText().replaceAll(",", ""));
        if (faceWidth < 150) {
            JOptionPane.showMessageDialog(this, "Nhập số lớn hơn 150");
        } else {
            drawPanel.OBJECT_HEIGHT = faceWidth;
            reloadDisplay();
        }
    }//GEN-LAST:event_txtFaceWidthFocusLost

    private void chkCutTailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCutTailActionPerformed
        calculateDataAndReloadDisplay();
    }//GEN-LAST:event_chkCutTailActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        btnCalculate.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void txtCutHeadLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCutHeadLengthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCutHeadLengthActionPerformed

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed
        drawPanel.zoomIn();
    }//GEN-LAST:event_btnZoomInActionPerformed

    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed
        drawPanel.zoomOut();
    }//GEN-LAST:event_btnZoomOutActionPerformed

    private void chkShowPositionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowPositionTextActionPerformed
        drawPanel.setIsShowPosition(chkShowPositionText.isSelected());
    }//GEN-LAST:event_chkShowPositionTextActionPerformed

    private void btnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsActionPerformed
        save(true);
    }//GEN-LAST:event_btnSaveAsActionPerformed

    private void chkMarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMarkerActionPerformed
        if (lstObject.getSelectedIndex() >= 0) {
            ObjectV objV = environment.getListObject().get(lstObject.getSelectedIndex());
            if (objV != null) {
                // use getText instead getValue 
                objV.setHasmark(chkMarker.isSelected());
                calculateDataAndReloadDisplay();
            }
        }
        txtMarker.setEnabled(chkMarker.isSelected());
    }//GEN-LAST:event_chkMarkerActionPerformed

    class ComboBoxRenderer extends JLabel
            implements ListCellRenderer {

        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value != null && value instanceof Template) {
                Template item = (Template) value;
                setText(item.getName());
            }
            return this;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels = javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx = 0; idx < installedLookAndFeels.length; idx++) {
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Punching.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Punching.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Punching.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Punching.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Punching().setVisible(true);
            }
        });
        System.out.println(System.getProperty("user.dir"));
//        JOptionPane.showMessageDialog(null, System.getProperty("user.dir"));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnEditTemplate;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveAs;
    private javax.swing.JButton btnSetting;
    private javax.swing.JButton btnWritePLC;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.JComboBox cboListTemplate;
    private javax.swing.JCheckBox chkCutHead;
    private javax.swing.JCheckBox chkCutTail;
    private javax.swing.JCheckBox chkMarker;
    private javax.swing.JCheckBox chkShowPositionText;
    private punching.ObjectDrawPanel drawPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JLabel lblObjectName;
    private javax.swing.JList lstObject;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelObjects;
    private javax.swing.JPanel panelOtherOption;
    private punching.MyTable tblHolesA;
    private punching.MyTable tblHolesB;
    private javax.swing.JFormattedTextField txtCutHeadLength;
    private javax.swing.JFormattedTextField txtFaceWidth;
    private javax.swing.JFormattedTextField txtMarker;
    private javax.swing.JFormattedTextField txtObjectLength;
    private javax.swing.JFormattedTextField txtTotalLength;
    // End of variables declaration//GEN-END:variables

    // Manual functions here
    Environment environment = Environment.getInstance();
    List<Hole> listHoles;
    float totalLength = 0;
    TemplateFrame frameTemplate = null;
    CalculateFrame frameCalculate = null;

    private void reloadListObjectV() {
        DefaultListModel listModel = new DefaultListModel();
        for (ObjectV obj : environment.getListObject()) {
            listModel.addElement(obj.getName() + " - " + obj.getLength());
        }
        lstObject.setModel(listModel);
    }

    private void reloadDisplay() {
        if (chkCutHead.isSelected() && txtCutHeadLength.getValue() != null) {
            try {
                float headLength = Float.parseFloat(txtCutHeadLength.getText().replace(",", ""));
                drawPanel.setHeadCutLength(headLength);
            } catch (NumberFormatException numberFormatException) {
            }
        } else {
            drawPanel.setHeadCutLength(0);
        }
        drawPanel.setIsCutTail(chkCutTail.isSelected());

        drawPanel.setListObject(environment.getListObject());
        txtTotalLength.setValue(totalLength);
    }

    private void calculateDataAndReloadDisplay() {
        calculateData();
        reloadDisplay();
    }

    /**
     * For combo box
     *
     * @return
     */
    private TemplateModel getTemplateModel() {
        Environment.reloadTemplate();
        Template listTemplate[] = new Template[Environment.getListTemplate().size()];
        for (int i = 0; i < Environment.getListTemplate().size(); i++) {
            listTemplate[i] = Environment.getListTemplate().get(i);
        }
        TemplateModel comboModel = new TemplateModel(listTemplate);
        return comboModel;
    }

    private void calculateData() {
        listHoles = new ArrayList<Hole>();
        // Cuts, use hole as cut
        Hole preHole = null;
        Tool cutTool = environment.getSetting().getCutTool();
        float headLength = 0; // for cut head
        if (chkCutHead.isSelected() && txtCutHeadLength.getValue() != null) {
            try {
                headLength = Float.parseFloat(txtCutHeadLength.getText().replaceAll(",", ""));
                Hole hole = new Hole(0, 0, cutTool);
                hole.setName("Cut head");
                hole.setMachineY(headLength + environment.getSetting().getCutTool().getYpos());
                listHoles.add(hole);
            } catch (NumberFormatException numberFormatException) {
            }
        }

        // for cut
        for (int i = 0; i < environment.getListObject().size(); i++) {
            ObjectV obj = environment.getListObject().get(i);
            Hole cut = new Hole(0, 0, cutTool);
            cut.setName("Cut " + (i + 1));
            // calculate machineY for each object
            if (preHole == null) { // the first object
                cut.setMachineY(obj.getLength() + headLength + environment.getSetting().getCutTool().getYpos());
            } else {
                //ObjectV preObj = environment.getListObject().get(i - 1);
                cut.setMachineY(obj.getLength() + preHole.getMachineY());
            }
            // add if it is not the last or cut tail is selected
            if (i < (environment.getListObject().size() - 1) || chkCutTail.isSelected()) {
                listHoles.add(cut);
            }

            preHole = cut;

        }

        // Holes
        // Total Length
        totalLength = headLength;
        ObjectV preObj = null;
        boolean isFirstObj = true;
        for (ObjectV objV : environment.getListObject()) {
            totalLength += objV.getLength();

            // calculate machineY for each object
            if (isFirstObj) {
                isFirstObj = false;
                objV.setMachineY(headLength); // remember! the head cut
            } else if (preObj != null) {
                objV.setMachineY(preObj.getLength() + preObj.getMachineY());
            }
            // remember for next loop
            preObj = objV;

            // calculate mY for each cut face A
            for (Hole hole : objV.getFaceAHoles()) {
                hole.setMachineY(objV.getMachineY() + hole.getT().getYpos() + hole.getY());
                hole.setName(objV.getName() + "-A(" + hole.getY() + "," + hole.getX() + "," + hole.getT().getValue() + ")");
            }
            listHoles.addAll(objV.getFaceAHoles());

            // calculate mY for each cut face B
            for (Hole hole : objV.getFaceBHoles()) {
                hole.setMachineY(objV.getMachineY() + hole.getT().getYpos() + hole.getY());
                hole.setName(objV.getName() + "-B(" + hole.getY() + "," + hole.getX() + "," + hole.getT().getValue() + ")");
            }
            listHoles.addAll(objV.getFaceBHoles());

            // calculate marker, only add if marker is checked
            if (objV.isHasmark()){
                objV.getMarker().setName("Marker for " + objV.getName());
                objV.getMarker().setMachineY(objV.getMachineY() + objV.getMarker().getT().getYpos() + objV.getMarker().getY());
                listHoles.add(objV.getMarker());
            }
        }

        // sort by Y
        Collections.sort(listHoles, new Comparator<Hole>() {
            @Override
            public int compare(Hole hole1, Hole hole2) {
                return (int) (hole1.getMachineY() - hole2.getMachineY());
            }
        });
    }

    private void setCustomTableEditors() {
        for (int i = 1; i < tblHolesA.getColumnModel().getColumnCount(); i++) {
            final DefaultCellEditor defaultEditor = (DefaultCellEditor) tblHolesA.getDefaultEditor(tblHolesA.getColumnClass(i));
            defaultEditor.setClickCountToStart(1);
        }
        for (int i = 1; i < tblHolesB.getColumnModel().getColumnCount(); i++) {
            final DefaultCellEditor defaultEditor = (DefaultCellEditor) tblHolesB.getDefaultEditor(tblHolesB.getColumnClass(i));
            defaultEditor.setClickCountToStart(1);
        }
    }
}
