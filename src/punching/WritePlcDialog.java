/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package punching;

import java.util.List;
import java.util.logging.Level;
import org.apache.log4j.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author admin
 */
public class WritePlcDialog extends javax.swing.JDialog {

    /**
     * Creates new form WritePlcDialog
     */
    public WritePlcDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taConsole = new javax.swing.JTextArea();
        btnStart = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Write to PLC");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        taConsole.setColumns(20);
        taConsole.setRows(5);
        jScrollPane1.setViewportView(taConsole);

        btnStart.setText("Nạp Lại");
        btnStart.setToolTipText("Open port and write to PLC");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnClear.setText("Xóa log");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnStop.setText("Ngừng");
        btnStop.setToolTipText("Close COMM port");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnClear)
                    .addComponent(btnStop))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        taConsole.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        if (!isRunning) {
            (new Thread() {
                public void run() {
                    writePLC();
                }
            }).start();
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        Plc plc = Plc.getInstance();
        if (plc.isOpenComm()) {
            plc.closeComm();
            appendText("Close COMM port " + Environment.getInstance().getSetting().getComPort() + "\r\n");
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        System.out.println("formWindowOpened");
        btnStartActionPerformed(null);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WritePlcDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WritePlcDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WritePlcDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WritePlcDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WritePlcDialog dialog = new WritePlcDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taConsole;
    // End of variables declaration//GEN-END:variables

    private List<Hole> data;
    private float length;
    final static Logger log = Logger.getLogger(WritePlcDialog.class);
    private boolean isRunning = false;
    private boolean isFirstActive = false;

    public int COMMAND_DELAY = 100;

    public List<Hole> getData() {
        return data;
    }

    public void setData(List<Hole> data) {
        this.data = data;
    }

    public float getLength() {
        return length;
    }

    public void setLength(float length) {
        this.length = length;
    }

    private void appendText(final String text) {
//        SwingUtilities.invokeLater(new Runnable() {
//            public void run() {
        taConsole.append(text);
        log.info(text);
//            }
//        });
    }

    public void writePLC() {
        btnStart.setEnabled(false);
        btnStop.setEnabled(true);
        isRunning = true;
        Plc plc = Plc.getInstance();
        if (plc.isOpenComm()) {
            appendText("COMM port is openned on " + Environment.getInstance().getSetting().getComPort() + "\r\n");
        } else {
            if (plc.openComm()) {
                appendText("Open COMM port " + Environment.getInstance().getSetting().getComPort() + "\r\n");
            } else {
                appendText("FAILED on openning COMM port " + Environment.getInstance().getSetting().getComPort() + "\r\n");
                isRunning = false;
                btnStart.setEnabled(true);
                btnStop.setEnabled(false);
                return;
            }
        }

        // start to write
        int position = 1000;
        if (data != null) {
            try {
                appendText("Write length: " + length + "\r\n");
                position = 1000;
                plc.writePLC32((int) (length * 10), position); // D1000, multiple 10 for decimal fraction                
                Thread.sleep(COMMAND_DELAY);

                appendText("Write number of hole: " + data.size() + "\r\n");
                position = 1002; //D1002
                plc.writePLC(data.size(), position); //write size to D1002
                Thread.sleep(COMMAND_DELAY);

                float thickness = Environment.getInstance().getSetting().getThickness();
                appendText("Write V thickness: " + thickness + "\r\n");
                position = 1008; //D1008
                plc.writePLC((int) (thickness * 10), position); //write size to D1008, multiple 10 for decimal fraction
                Thread.sleep(COMMAND_DELAY);

                position = 1010; // start data at 1010
                for (Hole hole : data) {
                    appendText("Write " + hole.getName() + "\r\n");
                    //multiple 10 for decimal fraction     
                    plc.writeHole((int) (hole.getMachineY() * 10), (int) (hole.getX() * 10), hole.getT().getValue(), position);
                    Thread.sleep(COMMAND_DELAY);

                    position += 5; //move to next 5
                }
            } catch (InterruptedException ex) {
                log.error(ex);
            }
        }
        appendText("Finish! " + "\r\n");
        isRunning = false;
        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
    }

    public boolean isIsRunning() {
        return isRunning;
    }

    public void setIsRunning(boolean isRunning) {
        this.isRunning = isRunning;
    }    

    public boolean isIsFirstActive() {
        return isFirstActive;
    }

    public void setIsFirstActive(boolean isFirstActive) {
        this.isFirstActive = isFirstActive;
    }
    
}
